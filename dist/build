#!/bin/bash
set -o nounset
set -o errexit
set -o pipefail

cd $( dirname $0 )/..

version=$( perl -ne '/FotomatVersion.*\b(\d+\.\d+\.\d+)/ and print "${1}-1"' cmd/fotomat/version.go )

build() {
    local base="$1"
    local format=""
    local path=""
    local final=""

    local repo="${base%%:*}"
    local tag="${base#*:}"

    if [ "$repo" = "" -o "$tag" = "" -o "$tag" = "$repo" ]; then
	echo "Base must be formatted as repo:tag"
	exit 1
    fi

    case $repo in
    debian|ubuntu|mint)
        format="dpkg"
        path="app/src/github.com/die-net/fotomat/dist/dpkg/fotomat.deb"
        final="fotomat-${version}.${tag}.amd64.deb"
        ;;
    amazonlinux|centos|fedora|oraclelinux|rhel|sl)
        path="root/rpmbuild/RPMS/*/fotomat*.rpm"
        format="rpm"
        ;;
    *)
        echo "Don't understand how to parse base $base"
	exit 1
	;;
    esac

    if [ ! -f Dockerfile-$format ]; then
        echo "Dockerfile-$format doesn't exist!"
        return
    fi

    local slashes=$(( 0 + $( echo "$path" | tr -cd / | wc -c ) ))

    # BSD tar doesn't require and can't handle the --wildcards flag.
    local wildcards=""
    [[ "$(tar --version)" = bsd* ]] || wildcards="--wildcards"

    docker build --pull -f Dockerfile-$format --build-arg BASE=$base -t dienet/fotomat:$repo$tag .
    docker rm fotomat-$repo$tag || true
    docker run --name fotomat-$repo$tag dienet/fotomat:$repo$tag /bin/true
    docker export fotomat-$repo$tag | tar $wildcards --strip-components=$slashes -xvf - "$path" || true
    docker rm fotomat-$repo$tag
    docker rmi dienet/fotomat:$repo$tag
    if [ ! -z "$final" ]; then
        mv "$( basename "$path" )" "$final"
    fi
}

if [ $# -eq 0 ]; then
    echo "Usage: $0 <base> [<base> ...]  - Build one or more packages from the given base image via Docker"
    echo "       $0 all                  - Build all known base images"
    exit 1
fi

if [ "$1" = "all" ]; then
    for base in debian:buster debian:stretch centos:7; do
        build "$base"
    done
else 
    for base in "$@"; do
        build "$base"
    done    
fi
